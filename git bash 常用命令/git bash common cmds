git 安装成功之后首先做设置,--global参数的作用该表示这台机器上所有git仓库都会使用相同的用户名和
email地址,不使用--global参数表示当前git仓库使用的用户名和email地址
git config --global user.name "JacxWang"
git config --global user.email "camel_163.com"
创建版本库有两种方式:
1.git init	在当前目录创建仓库
2.git clone <远程库地址>	克隆远程库到本地
git add <文件名>		把文件添加到仓库
git commit -m "提示信息" 	把文件提交到仓库
git status	显示仓库状态
git diff <文件名>		显示工作区与暂存区的不同
git diff --cached <文件名>	显示暂存区与版本库的不同
git diff HEAD -- <文件名>	显示工作区与版本库的区别
git log		查看提交历史
git log --pretty=oneline	以单行查看历史目录 
git reset --hard HEAD^	版本回退到上一个版本
HEAD表示当前版本,HEAD^表示上一个版本,上上一个版本就是HEAD^^,上N个版本就写成HEAD~N
git reflog		查看命令历史
修改的两种情况:
1.工作区修改后还没有放到暂存区
git checkout -- <文件名> 	用版本库里的版本替换工作区的版本,使文件恢复到工作区未修改的状态
2.工作区修改后放到暂存区,又做了修改
git reset HEAD <文件名> 	用版本库里的版本替换暂存区的版本,把暂存区的修改撤销掉
git checkout --<文件名> 	用版本库里的版本替换工作区的版本,使文件恢复到工作区未修改的状态
git rm <文件名>	---->  git commit	从版本库删除文件
ssh-keygen -t rsa -c "邮件地址"	创建SSH key
git remote add origin <远程库地址> 添加远程库,origin是远程库的名字,是git默认叫法,可以修改
git push -u origin master	第一次推送master分支的所有内容
git push origin master 推送最新修改
创建分支的两种方法:
1.git branch <分支名> 创建分支----->git checkout <分支名> 切换分支
2.git checkout -b <分知名>	创建并切换到分支
git merge <分支名>	合并分支到当前分支
git branch -d <分支名>	删除分支
git branch -D <分支名>	强制删除分支
git log --graph	显示分支合并图
git log --graph --pretty=oneline --abbrev-commit	显示分支合并图
git merge --no-ff -m "提示信息" <分支名>		禁用ff(fast-forward)模式合并分支到当前分支
ff模式是合并分支的默认模式,合并分支时使用ff模式,删除分支时,会丢掉分支信息
git stash	把当前工作区储藏起来
git stash list	显示stash列表
恢复stash内容的两种方法"
1.git stash apply	恢复后stash内容不会被删除,需要用git stash drop删除
2.git stash pop		恢复的同时把stash内容也删除
git remote	显示远程库信息
git remote -v 显示更详细的远程库信息
git push origin master 从本地推送分支
git branch -b <分支名> origin/<分支名>	在本地创建和远程分支对应的分支,本地分支通常和远程分支名字一致
git branch --set-upstream=<分支名> origin/<分支名>	建立本地分支和远程分支的关联
git pull	从远程抓取分支